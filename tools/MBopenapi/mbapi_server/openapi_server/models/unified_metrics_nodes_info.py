# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.unified_metrics_nodes_info_metrics import UnifiedMetricsNodesInfoMetrics
from openapi_server import util

from openapi_server.models.unified_metrics_nodes_info_metrics import UnifiedMetricsNodesInfoMetrics  # noqa: E501

class UnifiedMetricsNodesInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, metrics=None):  # noqa: E501
        """UnifiedMetricsNodesInfo - a model defined in OpenAPI

        :param id: The id of this UnifiedMetricsNodesInfo.  # noqa: E501
        :type id: str
        :param metrics: The metrics of this UnifiedMetricsNodesInfo.  # noqa: E501
        :type metrics: UnifiedMetricsNodesInfoMetrics
        """
        self.openapi_types = {
            'id': str,
            'metrics': UnifiedMetricsNodesInfoMetrics
        }

        self.attribute_map = {
            'id': 'Id',
            'metrics': 'Metrics'
        }

        self._id = id
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'UnifiedMetricsNodesInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnifiedMetrics_NodesInfo of this UnifiedMetricsNodesInfo.  # noqa: E501
        :rtype: UnifiedMetricsNodesInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UnifiedMetricsNodesInfo.


        :return: The id of this UnifiedMetricsNodesInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnifiedMetricsNodesInfo.


        :param id: The id of this UnifiedMetricsNodesInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metrics(self):
        """Gets the metrics of this UnifiedMetricsNodesInfo.


        :return: The metrics of this UnifiedMetricsNodesInfo.
        :rtype: UnifiedMetricsNodesInfoMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this UnifiedMetricsNodesInfo.


        :param metrics: The metrics of this UnifiedMetricsNodesInfo.
        :type metrics: UnifiedMetricsNodesInfoMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

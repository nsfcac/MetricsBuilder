# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.unified_metrics_jobs_info import UnifiedMetricsJobsInfo
from openapi_server.models.unified_metrics_nodes_info import UnifiedMetricsNodesInfo
from openapi_server import util

from openapi_server.models.unified_metrics_jobs_info import UnifiedMetricsJobsInfo  # noqa: E501
from openapi_server.models.unified_metrics_nodes_info import UnifiedMetricsNodesInfo  # noqa: E501

class UnifiedMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes_info=None, jobs_info=None, time_stamp=None):  # noqa: E501
        """UnifiedMetrics - a model defined in OpenAPI

        :param nodes_info: The nodes_info of this UnifiedMetrics.  # noqa: E501
        :type nodes_info: UnifiedMetricsNodesInfo
        :param jobs_info: The jobs_info of this UnifiedMetrics.  # noqa: E501
        :type jobs_info: UnifiedMetricsJobsInfo
        :param time_stamp: The time_stamp of this UnifiedMetrics.  # noqa: E501
        :type time_stamp: List[int]
        """
        self.openapi_types = {
            'nodes_info': UnifiedMetricsNodesInfo,
            'jobs_info': UnifiedMetricsJobsInfo,
            'time_stamp': List[int]
        }

        self.attribute_map = {
            'nodes_info': 'NodesInfo',
            'jobs_info': 'JobsInfo',
            'time_stamp': 'TimeStamp'
        }

        self._nodes_info = nodes_info
        self._jobs_info = jobs_info
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt) -> 'UnifiedMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnifiedMetrics of this UnifiedMetrics.  # noqa: E501
        :rtype: UnifiedMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes_info(self):
        """Gets the nodes_info of this UnifiedMetrics.


        :return: The nodes_info of this UnifiedMetrics.
        :rtype: UnifiedMetricsNodesInfo
        """
        return self._nodes_info

    @nodes_info.setter
    def nodes_info(self, nodes_info):
        """Sets the nodes_info of this UnifiedMetrics.


        :param nodes_info: The nodes_info of this UnifiedMetrics.
        :type nodes_info: UnifiedMetricsNodesInfo
        """
        if nodes_info is None:
            raise ValueError("Invalid value for `nodes_info`, must not be `None`")  # noqa: E501

        self._nodes_info = nodes_info

    @property
    def jobs_info(self):
        """Gets the jobs_info of this UnifiedMetrics.


        :return: The jobs_info of this UnifiedMetrics.
        :rtype: UnifiedMetricsJobsInfo
        """
        return self._jobs_info

    @jobs_info.setter
    def jobs_info(self, jobs_info):
        """Sets the jobs_info of this UnifiedMetrics.


        :param jobs_info: The jobs_info of this UnifiedMetrics.
        :type jobs_info: UnifiedMetricsJobsInfo
        """
        if jobs_info is None:
            raise ValueError("Invalid value for `jobs_info`, must not be `None`")  # noqa: E501

        self._jobs_info = jobs_info

    @property
    def time_stamp(self):
        """Gets the time_stamp of this UnifiedMetrics.


        :return: The time_stamp of this UnifiedMetrics.
        :rtype: List[int]
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this UnifiedMetrics.


        :param time_stamp: The time_stamp of this UnifiedMetrics.
        :type time_stamp: List[int]
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UnifiedMetricsNodesInfoMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mem_usage=None, cpu_usage=None, node_power=None, fan_speed=None, cpu_inl_temp=None):  # noqa: E501
        """UnifiedMetricsNodesInfoMetrics - a model defined in OpenAPI

        :param mem_usage: The mem_usage of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :type mem_usage: List[float]
        :param cpu_usage: The cpu_usage of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :type cpu_usage: List[float]
        :param node_power: The node_power of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :type node_power: List[float]
        :param fan_speed: The fan_speed of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :type fan_speed: List[List[int]]
        :param cpu_inl_temp: The cpu_inl_temp of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :type cpu_inl_temp: List[List[float]]
        """
        self.openapi_types = {
            'mem_usage': List[float],
            'cpu_usage': List[float],
            'node_power': List[float],
            'fan_speed': List[List[int]],
            'cpu_inl_temp': List[List[float]]
        }

        self.attribute_map = {
            'mem_usage': 'MemUsage',
            'cpu_usage': 'CPUUsage',
            'node_power': 'NodePower',
            'fan_speed': 'FanSpeed',
            'cpu_inl_temp': 'CPUInlTemp'
        }

        self._mem_usage = mem_usage
        self._cpu_usage = cpu_usage
        self._node_power = node_power
        self._fan_speed = fan_speed
        self._cpu_inl_temp = cpu_inl_temp

    @classmethod
    def from_dict(cls, dikt) -> 'UnifiedMetricsNodesInfoMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnifiedMetrics_NodesInfo_Metrics of this UnifiedMetricsNodesInfoMetrics.  # noqa: E501
        :rtype: UnifiedMetricsNodesInfoMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mem_usage(self):
        """Gets the mem_usage of this UnifiedMetricsNodesInfoMetrics.


        :return: The mem_usage of this UnifiedMetricsNodesInfoMetrics.
        :rtype: List[float]
        """
        return self._mem_usage

    @mem_usage.setter
    def mem_usage(self, mem_usage):
        """Sets the mem_usage of this UnifiedMetricsNodesInfoMetrics.


        :param mem_usage: The mem_usage of this UnifiedMetricsNodesInfoMetrics.
        :type mem_usage: List[float]
        """
        if mem_usage is None:
            raise ValueError("Invalid value for `mem_usage`, must not be `None`")  # noqa: E501

        self._mem_usage = mem_usage

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this UnifiedMetricsNodesInfoMetrics.


        :return: The cpu_usage of this UnifiedMetricsNodesInfoMetrics.
        :rtype: List[float]
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this UnifiedMetricsNodesInfoMetrics.


        :param cpu_usage: The cpu_usage of this UnifiedMetricsNodesInfoMetrics.
        :type cpu_usage: List[float]
        """
        if cpu_usage is None:
            raise ValueError("Invalid value for `cpu_usage`, must not be `None`")  # noqa: E501

        self._cpu_usage = cpu_usage

    @property
    def node_power(self):
        """Gets the node_power of this UnifiedMetricsNodesInfoMetrics.


        :return: The node_power of this UnifiedMetricsNodesInfoMetrics.
        :rtype: List[float]
        """
        return self._node_power

    @node_power.setter
    def node_power(self, node_power):
        """Sets the node_power of this UnifiedMetricsNodesInfoMetrics.


        :param node_power: The node_power of this UnifiedMetricsNodesInfoMetrics.
        :type node_power: List[float]
        """
        if node_power is None:
            raise ValueError("Invalid value for `node_power`, must not be `None`")  # noqa: E501

        self._node_power = node_power

    @property
    def fan_speed(self):
        """Gets the fan_speed of this UnifiedMetricsNodesInfoMetrics.


        :return: The fan_speed of this UnifiedMetricsNodesInfoMetrics.
        :rtype: List[List[int]]
        """
        return self._fan_speed

    @fan_speed.setter
    def fan_speed(self, fan_speed):
        """Sets the fan_speed of this UnifiedMetricsNodesInfoMetrics.


        :param fan_speed: The fan_speed of this UnifiedMetricsNodesInfoMetrics.
        :type fan_speed: List[List[int]]
        """
        if fan_speed is None:
            raise ValueError("Invalid value for `fan_speed`, must not be `None`")  # noqa: E501

        self._fan_speed = fan_speed

    @property
    def cpu_inl_temp(self):
        """Gets the cpu_inl_temp of this UnifiedMetricsNodesInfoMetrics.


        :return: The cpu_inl_temp of this UnifiedMetricsNodesInfoMetrics.
        :rtype: List[List[float]]
        """
        return self._cpu_inl_temp

    @cpu_inl_temp.setter
    def cpu_inl_temp(self, cpu_inl_temp):
        """Sets the cpu_inl_temp of this UnifiedMetricsNodesInfoMetrics.


        :param cpu_inl_temp: The cpu_inl_temp of this UnifiedMetricsNodesInfoMetrics.
        :type cpu_inl_temp: List[List[float]]
        """
        if cpu_inl_temp is None:
            raise ValueError("Invalid value for `cpu_inl_temp`, must not be `None`")  # noqa: E501

        self._cpu_inl_temp = cpu_inl_temp

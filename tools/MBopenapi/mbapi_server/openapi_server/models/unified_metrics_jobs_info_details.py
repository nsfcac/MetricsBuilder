# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UnifiedMetricsJobsInfoDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user=None, submit_time=None, start_time=None, job_name=None):  # noqa: E501
        """UnifiedMetricsJobsInfoDetails - a model defined in OpenAPI

        :param user: The user of this UnifiedMetricsJobsInfoDetails.  # noqa: E501
        :type user: str
        :param submit_time: The submit_time of this UnifiedMetricsJobsInfoDetails.  # noqa: E501
        :type submit_time: int
        :param start_time: The start_time of this UnifiedMetricsJobsInfoDetails.  # noqa: E501
        :type start_time: int
        :param job_name: The job_name of this UnifiedMetricsJobsInfoDetails.  # noqa: E501
        :type job_name: str
        """
        self.openapi_types = {
            'user': str,
            'submit_time': int,
            'start_time': int,
            'job_name': str
        }

        self.attribute_map = {
            'user': 'User',
            'submit_time': 'SubmitTime',
            'start_time': 'StartTime',
            'job_name': 'JobName'
        }

        self._user = user
        self._submit_time = submit_time
        self._start_time = start_time
        self._job_name = job_name

    @classmethod
    def from_dict(cls, dikt) -> 'UnifiedMetricsJobsInfoDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnifiedMetrics_JobsInfo_Details of this UnifiedMetricsJobsInfoDetails.  # noqa: E501
        :rtype: UnifiedMetricsJobsInfoDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this UnifiedMetricsJobsInfoDetails.


        :return: The user of this UnifiedMetricsJobsInfoDetails.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UnifiedMetricsJobsInfoDetails.


        :param user: The user of this UnifiedMetricsJobsInfoDetails.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def submit_time(self):
        """Gets the submit_time of this UnifiedMetricsJobsInfoDetails.


        :return: The submit_time of this UnifiedMetricsJobsInfoDetails.
        :rtype: int
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this UnifiedMetricsJobsInfoDetails.


        :param submit_time: The submit_time of this UnifiedMetricsJobsInfoDetails.
        :type submit_time: int
        """
        if submit_time is None:
            raise ValueError("Invalid value for `submit_time`, must not be `None`")  # noqa: E501

        self._submit_time = submit_time

    @property
    def start_time(self):
        """Gets the start_time of this UnifiedMetricsJobsInfoDetails.


        :return: The start_time of this UnifiedMetricsJobsInfoDetails.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UnifiedMetricsJobsInfoDetails.


        :param start_time: The start_time of this UnifiedMetricsJobsInfoDetails.
        :type start_time: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def job_name(self):
        """Gets the job_name of this UnifiedMetricsJobsInfoDetails.


        :return: The job_name of this UnifiedMetricsJobsInfoDetails.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this UnifiedMetricsJobsInfoDetails.


        :param job_name: The job_name of this UnifiedMetricsJobsInfoDetails.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

# coding: utf-8

"""
    MetricsBuilder API

    An API for accessing High Performance Computing(HPC) system monitoring metrics.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: jie.li@ttu.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UnifiedMetrics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nodes_info': 'UnifiedMetricsNodesInfo',
        'jobs_info': 'UnifiedMetricsJobsInfo',
        'time_stamp': 'list[int]'
    }

    attribute_map = {
        'nodes_info': 'nodes_info',
        'jobs_info': 'jobs_info',
        'time_stamp': 'time_stamp'
    }

    def __init__(self, nodes_info=None, jobs_info=None, time_stamp=None, local_vars_configuration=None):  # noqa: E501
        """UnifiedMetrics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nodes_info = None
        self._jobs_info = None
        self._time_stamp = None
        self.discriminator = None

        self.nodes_info = nodes_info
        self.jobs_info = jobs_info
        self.time_stamp = time_stamp

    @property
    def nodes_info(self):
        """Gets the nodes_info of this UnifiedMetrics.  # noqa: E501


        :return: The nodes_info of this UnifiedMetrics.  # noqa: E501
        :rtype: UnifiedMetricsNodesInfo
        """
        return self._nodes_info

    @nodes_info.setter
    def nodes_info(self, nodes_info):
        """Sets the nodes_info of this UnifiedMetrics.


        :param nodes_info: The nodes_info of this UnifiedMetrics.  # noqa: E501
        :type: UnifiedMetricsNodesInfo
        """
        if self.local_vars_configuration.client_side_validation and nodes_info is None:  # noqa: E501
            raise ValueError("Invalid value for `nodes_info`, must not be `None`")  # noqa: E501

        self._nodes_info = nodes_info

    @property
    def jobs_info(self):
        """Gets the jobs_info of this UnifiedMetrics.  # noqa: E501


        :return: The jobs_info of this UnifiedMetrics.  # noqa: E501
        :rtype: UnifiedMetricsJobsInfo
        """
        return self._jobs_info

    @jobs_info.setter
    def jobs_info(self, jobs_info):
        """Sets the jobs_info of this UnifiedMetrics.


        :param jobs_info: The jobs_info of this UnifiedMetrics.  # noqa: E501
        :type: UnifiedMetricsJobsInfo
        """
        if self.local_vars_configuration.client_side_validation and jobs_info is None:  # noqa: E501
            raise ValueError("Invalid value for `jobs_info`, must not be `None`")  # noqa: E501

        self._jobs_info = jobs_info

    @property
    def time_stamp(self):
        """Gets the time_stamp of this UnifiedMetrics.  # noqa: E501


        :return: The time_stamp of this UnifiedMetrics.  # noqa: E501
        :rtype: list[int]
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this UnifiedMetrics.


        :param time_stamp: The time_stamp of this UnifiedMetrics.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and time_stamp is None:  # noqa: E501
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnifiedMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnifiedMetrics):
            return True

        return self.to_dict() != other.to_dict()

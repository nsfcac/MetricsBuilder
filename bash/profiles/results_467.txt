
-How much memory was allocated during the executions of these queries?
Showing nodes accounting for 135.28GB, 71.29% of 189.77GB total
Dropped 468 nodes (cum <= 0.95GB)
Showing top 10 nodes out of 153
      flat  flat%   sum%        cum   cum%
   35.28GB 18.59% 18.59%    77.40GB 40.79%  github.com/influxdata/influxdb/query.(*integerReduceIntegerIterator).reduce
   22.51GB 11.86% 30.45%    53.76GB 28.33%  github.com/influxdata/influxdb/query.(*floatReduceFloatIterator).reduce
   17.56GB  9.25% 39.71%    17.56GB  9.25%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*integerIterator).Next
   14.09GB  7.43% 47.13%    14.09GB  7.43%  github.com/influxdata/influxdb/query.(*IntegerFuncReducer).Emit
   13.98GB  7.37% 54.50%    13.98GB  7.37%  github.com/influxdata/influxdb/query.(*IntegerFuncReducer).AggregateInteger
   10.42GB  5.49% 59.99%    10.42GB  5.49%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).TagSets
    6.96GB  3.67% 63.66%     6.96GB  3.67%  github.com/influxdata/influxdb/query.(*FloatMeanReducer).Emit
    6.08GB  3.21% 66.86%     6.08GB  3.21%  github.com/influxdata/influxdb/tsdb/engine/tsm1.DecodeIntegerBlock
    4.29GB  2.26% 69.12%     4.33GB  2.28%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*floatIterator).Next
    4.12GB  2.17% 71.29%     4.12GB  2.17%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*StringDecoder).Read

-How much objects was allocated during the executions of these queries?
Showing nodes accounting for 2572162127, 78.36% of 3282531573 total
Dropped 519 nodes (cum <= 16412657)
Showing top 10 nodes out of 102
      flat  flat%   sum%        cum   cum%
 785103886 23.92% 23.92% 1648687574 50.23%  github.com/influxdata/influxdb/query.(*integerReduceIntegerIterator).reduce
 589170233 17.95% 41.87%  589170233 17.95%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*integerIterator).Next
 427195430 13.01% 54.88% 1136669906 34.63%  github.com/influxdata/influxdb/query.(*floatReduceFloatIterator).reduce
 157606664  4.80% 59.68%  157606664  4.80%  github.com/influxdata/influxdb/query.(*IntegerFuncReducer).Emit
 156361363  4.76% 64.45%  156361363  4.76%  github.com/influxdata/influxdb/query.(*IntegerFuncReducer).AggregateInteger
 143839522  4.38% 68.83%  145085999  4.42%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*floatIterator).Next
  78677166  2.40% 71.22%   78677166  2.40%  github.com/influxdata/influxdb/query.newMinIterator.func2
  78578860  2.39% 73.62%   78578860  2.39%  github.com/influxdata/influxdb/query.newMeanIterator.func1
  77836584  2.37% 75.99%   77836584  2.37%  github.com/influxdata/influxdb/query.(*FloatMeanReducer).Emit
  77792419  2.37% 78.36%   77792419  2.37%  github.com/influxdata/influxdb/query.newMaxIterator.func2

-How much time was spent blocking during the query execution?
Showing nodes accounting for 6.22hrs, 100% of 6.22hrs total
Dropped 72 nodes (cum <= 0.03hrs)
Showing top 10 nodes out of 35
      flat  flat%   sum%        cum   cum%
   6.09hrs 97.93% 97.93%    6.09hrs 97.93%  runtime.selectgo
   0.09hrs  1.41% 99.34%    0.09hrs  1.41%  runtime.chanrecv2
   0.04hrs  0.64%   100%    0.04hrs  0.64%  runtime.chanrecv1
         0     0%   100%    0.39hrs  6.35%  github.com/influxdata/influxdb/monitor.(*Monitor).storeStatistics
         0     0%   100%    0.34hrs  5.47%  github.com/influxdata/influxdb/query.(*ExecutionContext).watch.func1
         0     0%   100%    0.34hrs  5.47%  github.com/influxdata/influxdb/query.(*TaskManager).waitForQuery
         0     0%   100%    0.41hrs  6.52%  github.com/influxdata/influxdb/services/continuous_querier.(*Service).backgroundLoop
         0     0%   100%    0.10hrs  1.68%  github.com/influxdata/influxdb/services/httpd.(*Handler).ServeHTTP
         0     0%   100%    0.09hrs  1.41%  github.com/influxdata/influxdb/services/httpd.(*Handler).logging.func1
         0     0%   100%    0.09hrs  1.41%  github.com/influxdata/influxdb/services/httpd.(*Handler).recovery.func1

-What was the CPU doing during the query execution?
howing nodes accounting for 23.64s, 47.44% of 49.83s total
Dropped 690 nodes (cum <= 0.25s)
Showing top 10 nodes out of 223
      flat  flat%   sum%        cum   cum%
     8.74s 17.54% 17.54%     15.29s 30.68%  runtime.scanobject
     3.03s  6.08% 23.62%      3.28s  6.58%  runtime.findObject
     2.83s  5.68% 29.30%      2.83s  5.68%  runtime.memclrNoHeapPointers
     1.81s  3.63% 32.93%      9.24s 18.54%  runtime.mallocgc
     1.50s  3.01% 35.94%      2.87s  5.76%  runtime.mapaccess2_faststr
     1.36s  2.73% 38.67%      1.72s  3.45%  runtime.heapBitsSetType
     1.35s  2.71% 41.38%      1.35s  2.71%  runtime.markBits.isMarked (inline)
     1.02s  2.05% 43.43%      1.11s  2.23%  runtime.mapiternext
        1s  2.01% 45.43%         1s  2.01%  memeqbody
        1s  2.01% 47.44%         1s  2.01%  runtime.nextFreeFast (inline)
Active filters:
   ignore=runtime
Showing nodes accounting for 5.81s, 11.66% of 49.83s total
Dropped 358 nodes (cum <= 0.25s)
Showing top 10 nodes out of 198
      flat  flat%   sum%        cum   cum%
     0.94s  1.89%  1.89%      3.35s  6.72%  github.com/influxdata/influxdb/query.(*integerReduceIntegerIterator).reduce
     0.78s  1.57%  3.45%      1.27s  2.55%  encoding/json.compact
     0.75s  1.51%  4.96%      0.75s  1.51%  github.com/influxdata/influxdb/query.keysMatch
     0.69s  1.38%  6.34%      2.77s  5.56%  github.com/influxdata/influxdb/query.(*floatReduceFloatIterator).reduce
     0.54s  1.08%  7.43%      0.80s  1.61%  compress/flate.(*compressor).findMatch
     0.53s  1.06%  8.49%      0.53s  1.06%  cmpbody
     0.49s  0.98%  9.47%      0.52s  1.04%  github.com/influxdata/influxdb/tsdb/index/inmem.(*series).Deleted
     0.40s   0.8% 10.27%      0.63s  1.26%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).SeriesByIDMap
     0.35s   0.7% 10.98%      0.35s   0.7%  sync.(*RWMutex).RLock
     0.34s  0.68% 11.66%      0.83s  1.67%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*integerIterator).Next
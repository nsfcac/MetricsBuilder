-How much memory was allocated during the executions of these queries?
Showing nodes accounting for 2312.28MB, 74.92% of 3086.21MB total
Dropped 206 nodes (cum <= 15.43MB)
Showing top 10 nodes out of 143
      flat  flat%   sum%        cum   cum%
  815.61MB 26.43% 26.43%   815.61MB 26.43%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).TagSets
  402.02MB 13.03% 39.45%   402.02MB 13.03%  github.com/influxdata/influxdb/tsdb/engine/tsm1.DecodeIntegerBlock
  294.53MB  9.54% 49.00%   294.53MB  9.54%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*StringDecoder).Read
  257.23MB  8.33% 57.33%   257.23MB  8.33%  github.com/influxdata/influxdb/vendor/github.com/golang/snappy.Decode
  169.12MB  5.48% 62.81%   250.52MB  8.12%  github.com/influxdata/influxdb/tsdb.IndexSet.MeasurementNamesByExpr
  145.01MB  4.70% 67.51%   276.01MB  8.94%  github.com/influxdata/influxdb/tsdb/index/inmem.(*Index).TagKeyIterator
   90.50MB  2.93% 70.44%    90.50MB  2.93%  sort.Strings
   48.56MB  1.57% 72.02%    48.56MB  1.57%  github.com/influxdata/influxdb/pkg/slices.CopyChunkedByteSlices
      47MB  1.52% 73.54%    63.01MB  2.04%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*FileStore).locations
   42.70MB  1.38% 74.92%    42.70MB  1.38%  github.com/influxdata/influxdb/services/meta.(*Client).ShardGroupsByTimeRange

-How much objects was allocated during the executions of these queries?
Showing nodes accounting for 16191544, 68.39% of 23675426 total
Dropped 203 nodes (cum <= 118377)
Showing top 10 nodes out of 146
      flat  flat%   sum%        cum   cum%
   4642279 19.61% 19.61%    8935017 37.74%  github.com/influxdata/influxdb/tsdb/index/inmem.(*Index).TagKeyIterator
   2965594 12.53% 32.13%    2965594 12.53%  sort.Strings
   1671194  7.06% 39.19%   10606211 44.80%  github.com/influxdata/influxdb/tsdb.IndexSet.tagKeyIterator
   1638424  6.92% 46.11%    1638424  6.92%  github.com/influxdata/influxdb/tsdb.(*SeriesFile).Retain
   1392682  5.88% 52.00%    2883671 12.18%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).TagKeys
   1078011  4.55% 56.55%    2547553 10.76%  github.com/influxdata/influxdb/tsdb.(*Shard).FieldDimensions
    892975  3.77% 60.32%     974406  4.12%  github.com/influxdata/influxdb/tsdb/engine/tsm1.(*FileStore).locations
    745261  3.15% 63.47%     745261  3.15%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).TagSets
    655370  2.77% 66.24%     715448  3.02%  github.com/influxdata/influxdb/tsdb.(*Shard).mapType
    509754  2.15% 68.39%     509754  2.15%  github.com/influxdata/influxdb/vendor/github.com/influxdata/platform/models.Tags.Map

-How much time was spent blocking during the query execution?
Showing nodes accounting for 11.54mins, 99.91% of 11.55mins total
Dropped 41 nodes (cum <= 0.06mins)
Showing top 10 nodes out of 23
      flat  flat%   sum%        cum   cum%
 11.44mins 99.04% 99.04%  11.44mins 99.04%  runtime.selectgo //selectgo returns the index of the chosen scase, which matches the ordinal position of its respective select call.
  0.10mins  0.87% 99.91%   0.10mins  0.87%  runtime.chanrecv1
         0     0% 99.91%   1.32mins 11.45%  github.com/influxdata/influxdb/monitor.(*Monitor).storeStatistics
         0     0% 99.91%   0.07mins  0.65%  github.com/influxdata/influxdb/query.(*ExecutionContext).watch.func1
         0     0% 99.91%   0.07mins   0.6%  github.com/influxdata/influxdb/query.(*TaskManager).waitForQuery
         0     0% 99.91%   1.27mins 10.97%  github.com/influxdata/influxdb/services/continuous_querier.(*Service).backgroundLoop
         0     0% 99.91%   1.01mins  8.75%  github.com/influxdata/influxdb/services/httpd.(*Handler).ServeHTTP
         0     0% 99.91%      1mins  8.66%  github.com/influxdata/influxdb/services/httpd.(*Handler).handleProfiles
         0     0% 99.91%   0.07mins  0.65%  github.com/influxdata/influxdb/services/httpd.(*Handler).serveQuery.func2
         0     0% 99.91%   1.33mins 11.54%  github.com/influxdata/influxdb/services/subscriber.(*Service).Open.func1

-What was the CPU doing during the query execution?
Showing nodes accounting for 14610ms, 61.70% of 23680ms total
Dropped 484 nodes (cum <= 118.40ms)
Showing top 10 nodes out of 196
      flat  flat%   sum%        cum   cum%
    6380ms 26.94% 26.94%    12610ms 53.25%  runtime.scanobject
    2830ms 11.95% 38.89%     3020ms 12.75%  runtime.findObject
    1610ms  6.80% 45.69%     1610ms  6.80%  runtime.markBits.isMarked (inline)
    1120ms  4.73% 50.42%     2860ms 12.08%  runtime.greyobject
     660ms  2.79% 53.21%      660ms  2.79%  runtime.memclrNoHeapPointers
     570ms  2.41% 55.62%      570ms  2.41%  cmpbody
     420ms  1.77% 57.39%      570ms  2.41%  runtime.mapiternext
     370ms  1.56% 58.95%      400ms  1.69%  github.com/influxdata/influxdb/tsdb/index/inmem.(*series).Deleted
     330ms  1.39% 60.35%      330ms  1.39%  runtime.futex
     320ms  1.35% 61.70%      320ms  1.35%  sync.(*RWMutex).RLock
Active filters:
   ignore=runtime
Showing nodes accounting for 2.23s, 9.42% of 23.68s total
Dropped 173 nodes (cum <= 0.12s)
Showing top 10 nodes out of 195
      flat  flat%   sum%        cum   cum%
     0.57s  2.41%  2.41%      0.57s  2.41%  cmpbody
     0.37s  1.56%  3.97%      0.40s  1.69%  github.com/influxdata/influxdb/tsdb/index/inmem.(*series).Deleted
     0.32s  1.35%  5.32%      0.32s  1.35%  sync.(*RWMutex).RLock
     0.31s  1.31%  6.63%      0.40s  1.69%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).SeriesByIDMap
     0.15s  0.63%  7.26%      0.23s  0.97%  github.com/influxdata/influxdb/tsdb/index/inmem.(*tagKeyValue).Cardinality
     0.13s  0.55%  7.81%      0.13s  0.55%  sync.(*RWMutex).RUnlock
     0.12s  0.51%  8.32%      0.12s  0.51%  github.com/influxdata/influxdb/vendor/github.com/golang/snappy.decode
     0.09s  0.38%  8.70%      0.33s  1.39%  github.com/influxdata/influxdb/tsdb/index/inmem.(*measurement).TagKeys
     0.09s  0.38%  9.08%      0.12s  0.51%  github.com/influxdata/influxdb/vendor/github.com/jwilder/encoding/simple8b.Decode
     0.08s  0.34%  9.42%      0.41s  1.73%  github.com/influxdata/influxdb/tsdb/engine/tsm1.DecodeIntegerBlock.func1
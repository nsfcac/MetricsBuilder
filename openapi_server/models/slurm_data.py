# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SlurmData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, tres_per_node=None, min_cpus=None, min_tmp_disk=None, end_time=None, features=None, group=None, over_subscribe=None, jobid=None, name=None, comment=None, time_limit=None, min_memory=None, req_nodes=None, command=None, priority=None, qos=None, reason=None, st=None, user=None, reservation=None, wckey=None, exc_nodes=None, nice=None, sct=None, exec_host=None, cpus=None, nodes=None, dependency=None, array_job_id=None, sockets_per_node=None, cores_per_socket=None, threads_per_core=None, array_task_id=None, time_left=None, time=None, nodelist=None, contiguous=None, partition=None, nodelist_reason=None, start_time=None, state=None, uid=None, submit_time=None, licenses=None, core_spec=None, schednodes=None, work_dir=None):  # noqa: E501
        """SlurmData - a model defined in OpenAPI

        :param account: The account of this SlurmData.  # noqa: E501
        :type account: str
        :param tres_per_node: The tres_per_node of this SlurmData.  # noqa: E501
        :type tres_per_node: str
        :param min_cpus: The min_cpus of this SlurmData.  # noqa: E501
        :type min_cpus: str
        :param min_tmp_disk: The min_tmp_disk of this SlurmData.  # noqa: E501
        :type min_tmp_disk: str
        :param end_time: The end_time of this SlurmData.  # noqa: E501
        :type end_time: float
        :param features: The features of this SlurmData.  # noqa: E501
        :type features: str
        :param group: The group of this SlurmData.  # noqa: E501
        :type group: str
        :param over_subscribe: The over_subscribe of this SlurmData.  # noqa: E501
        :type over_subscribe: str
        :param jobid: The jobid of this SlurmData.  # noqa: E501
        :type jobid: str
        :param name: The name of this SlurmData.  # noqa: E501
        :type name: str
        :param comment: The comment of this SlurmData.  # noqa: E501
        :type comment: str
        :param time_limit: The time_limit of this SlurmData.  # noqa: E501
        :type time_limit: str
        :param min_memory: The min_memory of this SlurmData.  # noqa: E501
        :type min_memory: str
        :param req_nodes: The req_nodes of this SlurmData.  # noqa: E501
        :type req_nodes: str
        :param command: The command of this SlurmData.  # noqa: E501
        :type command: str
        :param priority: The priority of this SlurmData.  # noqa: E501
        :type priority: str
        :param qos: The qos of this SlurmData.  # noqa: E501
        :type qos: str
        :param reason: The reason of this SlurmData.  # noqa: E501
        :type reason: str
        :param st: The st of this SlurmData.  # noqa: E501
        :type st: str
        :param user: The user of this SlurmData.  # noqa: E501
        :type user: str
        :param reservation: The reservation of this SlurmData.  # noqa: E501
        :type reservation: str
        :param wckey: The wckey of this SlurmData.  # noqa: E501
        :type wckey: str
        :param exc_nodes: The exc_nodes of this SlurmData.  # noqa: E501
        :type exc_nodes: str
        :param nice: The nice of this SlurmData.  # noqa: E501
        :type nice: str
        :param sct: The sct of this SlurmData.  # noqa: E501
        :type sct: str
        :param exec_host: The exec_host of this SlurmData.  # noqa: E501
        :type exec_host: str
        :param cpus: The cpus of this SlurmData.  # noqa: E501
        :type cpus: float
        :param nodes: The nodes of this SlurmData.  # noqa: E501
        :type nodes: str
        :param dependency: The dependency of this SlurmData.  # noqa: E501
        :type dependency: str
        :param array_job_id: The array_job_id of this SlurmData.  # noqa: E501
        :type array_job_id: str
        :param sockets_per_node: The sockets_per_node of this SlurmData.  # noqa: E501
        :type sockets_per_node: str
        :param cores_per_socket: The cores_per_socket of this SlurmData.  # noqa: E501
        :type cores_per_socket: str
        :param threads_per_core: The threads_per_core of this SlurmData.  # noqa: E501
        :type threads_per_core: str
        :param array_task_id: The array_task_id of this SlurmData.  # noqa: E501
        :type array_task_id: str
        :param time_left: The time_left of this SlurmData.  # noqa: E501
        :type time_left: str
        :param time: The time of this SlurmData.  # noqa: E501
        :type time: str
        :param nodelist: The nodelist of this SlurmData.  # noqa: E501
        :type nodelist: List[str]
        :param contiguous: The contiguous of this SlurmData.  # noqa: E501
        :type contiguous: str
        :param partition: The partition of this SlurmData.  # noqa: E501
        :type partition: str
        :param nodelist_reason: The nodelist_reason of this SlurmData.  # noqa: E501
        :type nodelist_reason: str
        :param start_time: The start_time of this SlurmData.  # noqa: E501
        :type start_time: float
        :param state: The state of this SlurmData.  # noqa: E501
        :type state: str
        :param uid: The uid of this SlurmData.  # noqa: E501
        :type uid: str
        :param submit_time: The submit_time of this SlurmData.  # noqa: E501
        :type submit_time: float
        :param licenses: The licenses of this SlurmData.  # noqa: E501
        :type licenses: str
        :param core_spec: The core_spec of this SlurmData.  # noqa: E501
        :type core_spec: str
        :param schednodes: The schednodes of this SlurmData.  # noqa: E501
        :type schednodes: str
        :param work_dir: The work_dir of this SlurmData.  # noqa: E501
        :type work_dir: str
        """
        self.openapi_types = {
            'account': str,
            'tres_per_node': str,
            'min_cpus': str,
            'min_tmp_disk': str,
            'end_time': float,
            'features': str,
            'group': str,
            'over_subscribe': str,
            'jobid': str,
            'name': str,
            'comment': str,
            'time_limit': str,
            'min_memory': str,
            'req_nodes': str,
            'command': str,
            'priority': str,
            'qos': str,
            'reason': str,
            'st': str,
            'user': str,
            'reservation': str,
            'wckey': str,
            'exc_nodes': str,
            'nice': str,
            'sct': str,
            'exec_host': str,
            'cpus': float,
            'nodes': str,
            'dependency': str,
            'array_job_id': str,
            'sockets_per_node': str,
            'cores_per_socket': str,
            'threads_per_core': str,
            'array_task_id': str,
            'time_left': str,
            'time': str,
            'nodelist': List[str],
            'contiguous': str,
            'partition': str,
            'nodelist_reason': str,
            'start_time': float,
            'state': str,
            'uid': str,
            'submit_time': float,
            'licenses': str,
            'core_spec': str,
            'schednodes': str,
            'work_dir': str
        }

        self.attribute_map = {
            'account': 'ACCOUNT',
            'tres_per_node': 'TRES_PER_NODE',
            'min_cpus': 'MIN_CPUS',
            'min_tmp_disk': 'MIN_TMP_DISK',
            'end_time': 'END_TIME',
            'features': 'FEATURES',
            'group': 'GROUP',
            'over_subscribe': 'OVER_SUBSCRIBE',
            'jobid': 'JOBID',
            'name': 'NAME',
            'comment': 'COMMENT',
            'time_limit': 'TIME_LIMIT',
            'min_memory': 'MIN_MEMORY',
            'req_nodes': 'REQ_NODES',
            'command': 'COMMAND',
            'priority': 'PRIORITY',
            'qos': 'QOS',
            'reason': 'REASON',
            'st': 'ST',
            'user': 'USER',
            'reservation': 'RESERVATION',
            'wckey': 'WCKEY',
            'exc_nodes': 'EXC_NODES',
            'nice': 'NICE',
            'sct': 'S:C:T',
            'exec_host': 'EXEC_HOST',
            'cpus': 'CPUS',
            'nodes': 'NODES',
            'dependency': 'DEPENDENCY',
            'array_job_id': 'ARRAY_JOB_ID',
            'sockets_per_node': 'SOCKETS_PER_NODE',
            'cores_per_socket': 'CORES_PER_SOCKET',
            'threads_per_core': 'THREADS_PER_CORE',
            'array_task_id': 'ARRAY_TASK_ID',
            'time_left': 'TIME_LEFT',
            'time': 'TIME',
            'nodelist': 'NODELIST',
            'contiguous': 'CONTIGUOUS',
            'partition': 'PARTITION',
            'nodelist_reason': 'NODELIST(REASON)',
            'start_time': 'START_TIME',
            'state': 'STATE',
            'uid': 'UID',
            'submit_time': 'SUBMIT_TIME',
            'licenses': 'LICENSES',
            'core_spec': 'CORE_SPEC',
            'schednodes': 'SCHEDNODES',
            'work_dir': 'WORK_DIR'
        }

        self._account = account
        self._tres_per_node = tres_per_node
        self._min_cpus = min_cpus
        self._min_tmp_disk = min_tmp_disk
        self._end_time = end_time
        self._features = features
        self._group = group
        self._over_subscribe = over_subscribe
        self._jobid = jobid
        self._name = name
        self._comment = comment
        self._time_limit = time_limit
        self._min_memory = min_memory
        self._req_nodes = req_nodes
        self._command = command
        self._priority = priority
        self._qos = qos
        self._reason = reason
        self._st = st
        self._user = user
        self._reservation = reservation
        self._wckey = wckey
        self._exc_nodes = exc_nodes
        self._nice = nice
        self._sct = sct
        self._exec_host = exec_host
        self._cpus = cpus
        self._nodes = nodes
        self._dependency = dependency
        self._array_job_id = array_job_id
        self._sockets_per_node = sockets_per_node
        self._cores_per_socket = cores_per_socket
        self._threads_per_core = threads_per_core
        self._array_task_id = array_task_id
        self._time_left = time_left
        self._time = time
        self._nodelist = nodelist
        self._contiguous = contiguous
        self._partition = partition
        self._nodelist_reason = nodelist_reason
        self._start_time = start_time
        self._state = state
        self._uid = uid
        self._submit_time = submit_time
        self._licenses = licenses
        self._core_spec = core_spec
        self._schednodes = schednodes
        self._work_dir = work_dir

    @classmethod
    def from_dict(cls, dikt) -> 'SlurmData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SlurmData of this SlurmData.  # noqa: E501
        :rtype: SlurmData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this SlurmData.


        :return: The account of this SlurmData.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SlurmData.


        :param account: The account of this SlurmData.
        :type account: str
        """

        self._account = account

    @property
    def tres_per_node(self):
        """Gets the tres_per_node of this SlurmData.


        :return: The tres_per_node of this SlurmData.
        :rtype: str
        """
        return self._tres_per_node

    @tres_per_node.setter
    def tres_per_node(self, tres_per_node):
        """Sets the tres_per_node of this SlurmData.


        :param tres_per_node: The tres_per_node of this SlurmData.
        :type tres_per_node: str
        """

        self._tres_per_node = tres_per_node

    @property
    def min_cpus(self):
        """Gets the min_cpus of this SlurmData.


        :return: The min_cpus of this SlurmData.
        :rtype: str
        """
        return self._min_cpus

    @min_cpus.setter
    def min_cpus(self, min_cpus):
        """Sets the min_cpus of this SlurmData.


        :param min_cpus: The min_cpus of this SlurmData.
        :type min_cpus: str
        """

        self._min_cpus = min_cpus

    @property
    def min_tmp_disk(self):
        """Gets the min_tmp_disk of this SlurmData.


        :return: The min_tmp_disk of this SlurmData.
        :rtype: str
        """
        return self._min_tmp_disk

    @min_tmp_disk.setter
    def min_tmp_disk(self, min_tmp_disk):
        """Sets the min_tmp_disk of this SlurmData.


        :param min_tmp_disk: The min_tmp_disk of this SlurmData.
        :type min_tmp_disk: str
        """

        self._min_tmp_disk = min_tmp_disk

    @property
    def end_time(self):
        """Gets the end_time of this SlurmData.


        :return: The end_time of this SlurmData.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SlurmData.


        :param end_time: The end_time of this SlurmData.
        :type end_time: float
        """

        self._end_time = end_time

    @property
    def features(self):
        """Gets the features of this SlurmData.


        :return: The features of this SlurmData.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this SlurmData.


        :param features: The features of this SlurmData.
        :type features: str
        """

        self._features = features

    @property
    def group(self):
        """Gets the group of this SlurmData.


        :return: The group of this SlurmData.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SlurmData.


        :param group: The group of this SlurmData.
        :type group: str
        """

        self._group = group

    @property
    def over_subscribe(self):
        """Gets the over_subscribe of this SlurmData.


        :return: The over_subscribe of this SlurmData.
        :rtype: str
        """
        return self._over_subscribe

    @over_subscribe.setter
    def over_subscribe(self, over_subscribe):
        """Sets the over_subscribe of this SlurmData.


        :param over_subscribe: The over_subscribe of this SlurmData.
        :type over_subscribe: str
        """

        self._over_subscribe = over_subscribe

    @property
    def jobid(self):
        """Gets the jobid of this SlurmData.


        :return: The jobid of this SlurmData.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this SlurmData.


        :param jobid: The jobid of this SlurmData.
        :type jobid: str
        """

        self._jobid = jobid

    @property
    def name(self):
        """Gets the name of this SlurmData.


        :return: The name of this SlurmData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlurmData.


        :param name: The name of this SlurmData.
        :type name: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this SlurmData.


        :return: The comment of this SlurmData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SlurmData.


        :param comment: The comment of this SlurmData.
        :type comment: str
        """

        self._comment = comment

    @property
    def time_limit(self):
        """Gets the time_limit of this SlurmData.


        :return: The time_limit of this SlurmData.
        :rtype: str
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this SlurmData.


        :param time_limit: The time_limit of this SlurmData.
        :type time_limit: str
        """

        self._time_limit = time_limit

    @property
    def min_memory(self):
        """Gets the min_memory of this SlurmData.


        :return: The min_memory of this SlurmData.
        :rtype: str
        """
        return self._min_memory

    @min_memory.setter
    def min_memory(self, min_memory):
        """Sets the min_memory of this SlurmData.


        :param min_memory: The min_memory of this SlurmData.
        :type min_memory: str
        """

        self._min_memory = min_memory

    @property
    def req_nodes(self):
        """Gets the req_nodes of this SlurmData.


        :return: The req_nodes of this SlurmData.
        :rtype: str
        """
        return self._req_nodes

    @req_nodes.setter
    def req_nodes(self, req_nodes):
        """Sets the req_nodes of this SlurmData.


        :param req_nodes: The req_nodes of this SlurmData.
        :type req_nodes: str
        """

        self._req_nodes = req_nodes

    @property
    def command(self):
        """Gets the command of this SlurmData.


        :return: The command of this SlurmData.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this SlurmData.


        :param command: The command of this SlurmData.
        :type command: str
        """

        self._command = command

    @property
    def priority(self):
        """Gets the priority of this SlurmData.


        :return: The priority of this SlurmData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SlurmData.


        :param priority: The priority of this SlurmData.
        :type priority: str
        """

        self._priority = priority

    @property
    def qos(self):
        """Gets the qos of this SlurmData.


        :return: The qos of this SlurmData.
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this SlurmData.


        :param qos: The qos of this SlurmData.
        :type qos: str
        """

        self._qos = qos

    @property
    def reason(self):
        """Gets the reason of this SlurmData.


        :return: The reason of this SlurmData.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SlurmData.


        :param reason: The reason of this SlurmData.
        :type reason: str
        """

        self._reason = reason

    @property
    def st(self):
        """Gets the st of this SlurmData.


        :return: The st of this SlurmData.
        :rtype: str
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this SlurmData.


        :param st: The st of this SlurmData.
        :type st: str
        """

        self._st = st

    @property
    def user(self):
        """Gets the user of this SlurmData.


        :return: The user of this SlurmData.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SlurmData.


        :param user: The user of this SlurmData.
        :type user: str
        """

        self._user = user

    @property
    def reservation(self):
        """Gets the reservation of this SlurmData.


        :return: The reservation of this SlurmData.
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this SlurmData.


        :param reservation: The reservation of this SlurmData.
        :type reservation: str
        """

        self._reservation = reservation

    @property
    def wckey(self):
        """Gets the wckey of this SlurmData.


        :return: The wckey of this SlurmData.
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this SlurmData.


        :param wckey: The wckey of this SlurmData.
        :type wckey: str
        """

        self._wckey = wckey

    @property
    def exc_nodes(self):
        """Gets the exc_nodes of this SlurmData.


        :return: The exc_nodes of this SlurmData.
        :rtype: str
        """
        return self._exc_nodes

    @exc_nodes.setter
    def exc_nodes(self, exc_nodes):
        """Sets the exc_nodes of this SlurmData.


        :param exc_nodes: The exc_nodes of this SlurmData.
        :type exc_nodes: str
        """

        self._exc_nodes = exc_nodes

    @property
    def nice(self):
        """Gets the nice of this SlurmData.


        :return: The nice of this SlurmData.
        :rtype: str
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this SlurmData.


        :param nice: The nice of this SlurmData.
        :type nice: str
        """

        self._nice = nice

    @property
    def sct(self):
        """Gets the sct of this SlurmData.


        :return: The sct of this SlurmData.
        :rtype: str
        """
        return self._sct

    @sct.setter
    def sct(self, sct):
        """Sets the sct of this SlurmData.


        :param sct: The sct of this SlurmData.
        :type sct: str
        """

        self._sct = sct

    @property
    def exec_host(self):
        """Gets the exec_host of this SlurmData.


        :return: The exec_host of this SlurmData.
        :rtype: str
        """
        return self._exec_host

    @exec_host.setter
    def exec_host(self, exec_host):
        """Sets the exec_host of this SlurmData.


        :param exec_host: The exec_host of this SlurmData.
        :type exec_host: str
        """

        self._exec_host = exec_host

    @property
    def cpus(self):
        """Gets the cpus of this SlurmData.


        :return: The cpus of this SlurmData.
        :rtype: float
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this SlurmData.


        :param cpus: The cpus of this SlurmData.
        :type cpus: float
        """

        self._cpus = cpus

    @property
    def nodes(self):
        """Gets the nodes of this SlurmData.


        :return: The nodes of this SlurmData.
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this SlurmData.


        :param nodes: The nodes of this SlurmData.
        :type nodes: str
        """

        self._nodes = nodes

    @property
    def dependency(self):
        """Gets the dependency of this SlurmData.


        :return: The dependency of this SlurmData.
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this SlurmData.


        :param dependency: The dependency of this SlurmData.
        :type dependency: str
        """

        self._dependency = dependency

    @property
    def array_job_id(self):
        """Gets the array_job_id of this SlurmData.


        :return: The array_job_id of this SlurmData.
        :rtype: str
        """
        return self._array_job_id

    @array_job_id.setter
    def array_job_id(self, array_job_id):
        """Sets the array_job_id of this SlurmData.


        :param array_job_id: The array_job_id of this SlurmData.
        :type array_job_id: str
        """

        self._array_job_id = array_job_id

    @property
    def sockets_per_node(self):
        """Gets the sockets_per_node of this SlurmData.


        :return: The sockets_per_node of this SlurmData.
        :rtype: str
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node):
        """Sets the sockets_per_node of this SlurmData.


        :param sockets_per_node: The sockets_per_node of this SlurmData.
        :type sockets_per_node: str
        """

        self._sockets_per_node = sockets_per_node

    @property
    def cores_per_socket(self):
        """Gets the cores_per_socket of this SlurmData.


        :return: The cores_per_socket of this SlurmData.
        :rtype: str
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket):
        """Sets the cores_per_socket of this SlurmData.


        :param cores_per_socket: The cores_per_socket of this SlurmData.
        :type cores_per_socket: str
        """

        self._cores_per_socket = cores_per_socket

    @property
    def threads_per_core(self):
        """Gets the threads_per_core of this SlurmData.


        :return: The threads_per_core of this SlurmData.
        :rtype: str
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core):
        """Sets the threads_per_core of this SlurmData.


        :param threads_per_core: The threads_per_core of this SlurmData.
        :type threads_per_core: str
        """

        self._threads_per_core = threads_per_core

    @property
    def array_task_id(self):
        """Gets the array_task_id of this SlurmData.


        :return: The array_task_id of this SlurmData.
        :rtype: str
        """
        return self._array_task_id

    @array_task_id.setter
    def array_task_id(self, array_task_id):
        """Sets the array_task_id of this SlurmData.


        :param array_task_id: The array_task_id of this SlurmData.
        :type array_task_id: str
        """

        self._array_task_id = array_task_id

    @property
    def time_left(self):
        """Gets the time_left of this SlurmData.


        :return: The time_left of this SlurmData.
        :rtype: str
        """
        return self._time_left

    @time_left.setter
    def time_left(self, time_left):
        """Sets the time_left of this SlurmData.


        :param time_left: The time_left of this SlurmData.
        :type time_left: str
        """

        self._time_left = time_left

    @property
    def time(self):
        """Gets the time of this SlurmData.


        :return: The time of this SlurmData.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SlurmData.


        :param time: The time of this SlurmData.
        :type time: str
        """

        self._time = time

    @property
    def nodelist(self):
        """Gets the nodelist of this SlurmData.


        :return: The nodelist of this SlurmData.
        :rtype: List[str]
        """
        return self._nodelist

    @nodelist.setter
    def nodelist(self, nodelist):
        """Sets the nodelist of this SlurmData.


        :param nodelist: The nodelist of this SlurmData.
        :type nodelist: List[str]
        """

        self._nodelist = nodelist

    @property
    def contiguous(self):
        """Gets the contiguous of this SlurmData.


        :return: The contiguous of this SlurmData.
        :rtype: str
        """
        return self._contiguous

    @contiguous.setter
    def contiguous(self, contiguous):
        """Sets the contiguous of this SlurmData.


        :param contiguous: The contiguous of this SlurmData.
        :type contiguous: str
        """

        self._contiguous = contiguous

    @property
    def partition(self):
        """Gets the partition of this SlurmData.


        :return: The partition of this SlurmData.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this SlurmData.


        :param partition: The partition of this SlurmData.
        :type partition: str
        """

        self._partition = partition

    @property
    def nodelist_reason(self):
        """Gets the nodelist_reason of this SlurmData.


        :return: The nodelist_reason of this SlurmData.
        :rtype: str
        """
        return self._nodelist_reason

    @nodelist_reason.setter
    def nodelist_reason(self, nodelist_reason):
        """Sets the nodelist_reason of this SlurmData.


        :param nodelist_reason: The nodelist_reason of this SlurmData.
        :type nodelist_reason: str
        """

        self._nodelist_reason = nodelist_reason

    @property
    def start_time(self):
        """Gets the start_time of this SlurmData.


        :return: The start_time of this SlurmData.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SlurmData.


        :param start_time: The start_time of this SlurmData.
        :type start_time: float
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this SlurmData.


        :return: The state of this SlurmData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SlurmData.


        :param state: The state of this SlurmData.
        :type state: str
        """

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this SlurmData.


        :return: The uid of this SlurmData.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SlurmData.


        :param uid: The uid of this SlurmData.
        :type uid: str
        """

        self._uid = uid

    @property
    def submit_time(self):
        """Gets the submit_time of this SlurmData.


        :return: The submit_time of this SlurmData.
        :rtype: float
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this SlurmData.


        :param submit_time: The submit_time of this SlurmData.
        :type submit_time: float
        """

        self._submit_time = submit_time

    @property
    def licenses(self):
        """Gets the licenses of this SlurmData.


        :return: The licenses of this SlurmData.
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this SlurmData.


        :param licenses: The licenses of this SlurmData.
        :type licenses: str
        """

        self._licenses = licenses

    @property
    def core_spec(self):
        """Gets the core_spec of this SlurmData.


        :return: The core_spec of this SlurmData.
        :rtype: str
        """
        return self._core_spec

    @core_spec.setter
    def core_spec(self, core_spec):
        """Sets the core_spec of this SlurmData.


        :param core_spec: The core_spec of this SlurmData.
        :type core_spec: str
        """

        self._core_spec = core_spec

    @property
    def schednodes(self):
        """Gets the schednodes of this SlurmData.


        :return: The schednodes of this SlurmData.
        :rtype: str
        """
        return self._schednodes

    @schednodes.setter
    def schednodes(self, schednodes):
        """Sets the schednodes of this SlurmData.


        :param schednodes: The schednodes of this SlurmData.
        :type schednodes: str
        """

        self._schednodes = schednodes

    @property
    def work_dir(self):
        """Gets the work_dir of this SlurmData.


        :return: The work_dir of this SlurmData.
        :rtype: str
        """
        return self._work_dir

    @work_dir.setter
    def work_dir(self, work_dir):
        """Sets the work_dir of this SlurmData.


        :param work_dir: The work_dir of this SlurmData.
        :type work_dir: str
        """

        self._work_dir = work_dir

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.request_metrics_scoped_vars import RequestMetricsScopedVars
from openapi_server.models.request_metrics_targets import RequestMetricsTargets
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class RequestMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app=None, dashboard_id=None, interval=None, interval_ms=None, max_data_points=None, panel_id=None, range=None, range_raw=None, request_id=None, scoped_vars=None, targets=None, time_info=None, timezone=None):  # noqa: E501
        """RequestMetrics - a model defined in OpenAPI

        :param app: The app of this RequestMetrics.  # noqa: E501
        :type app: str
        :param dashboard_id: The dashboard_id of this RequestMetrics.  # noqa: E501
        :type dashboard_id: float
        :param interval: The interval of this RequestMetrics.  # noqa: E501
        :type interval: str
        :param interval_ms: The interval_ms of this RequestMetrics.  # noqa: E501
        :type interval_ms: float
        :param max_data_points: The max_data_points of this RequestMetrics.  # noqa: E501
        :type max_data_points: float
        :param panel_id: The panel_id of this RequestMetrics.  # noqa: E501
        :type panel_id: float
        :param range: The range of this RequestMetrics.  # noqa: E501
        :type range: TimeRange
        :param range_raw: The range_raw of this RequestMetrics.  # noqa: E501
        :type range_raw: TimeRange
        :param request_id: The request_id of this RequestMetrics.  # noqa: E501
        :type request_id: str
        :param scoped_vars: The scoped_vars of this RequestMetrics.  # noqa: E501
        :type scoped_vars: RequestMetricsScopedVars
        :param targets: The targets of this RequestMetrics.  # noqa: E501
        :type targets: List[RequestMetricsTargets]
        :param time_info: The time_info of this RequestMetrics.  # noqa: E501
        :type time_info: str
        :param timezone: The timezone of this RequestMetrics.  # noqa: E501
        :type timezone: str
        """
        self.openapi_types = {
            'app': str,
            'dashboard_id': float,
            'interval': str,
            'interval_ms': float,
            'max_data_points': float,
            'panel_id': float,
            'range': TimeRange,
            'range_raw': TimeRange,
            'request_id': str,
            'scoped_vars': RequestMetricsScopedVars,
            'targets': List[RequestMetricsTargets],
            'time_info': str,
            'timezone': str
        }

        self.attribute_map = {
            'app': 'app',
            'dashboard_id': 'dashboardId',
            'interval': 'interval',
            'interval_ms': 'intervalMs',
            'max_data_points': 'maxDataPoints',
            'panel_id': 'panelId',
            'range': 'range',
            'range_raw': 'rangeRaw',
            'request_id': 'requestId',
            'scoped_vars': 'scopedVars',
            'targets': 'targets',
            'time_info': 'timeInfo',
            'timezone': 'timezone'
        }

        self._app = app
        self._dashboard_id = dashboard_id
        self._interval = interval
        self._interval_ms = interval_ms
        self._max_data_points = max_data_points
        self._panel_id = panel_id
        self._range = range
        self._range_raw = range_raw
        self._request_id = request_id
        self._scoped_vars = scoped_vars
        self._targets = targets
        self._time_info = time_info
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt) -> 'RequestMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestMetrics of this RequestMetrics.  # noqa: E501
        :rtype: RequestMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this RequestMetrics.


        :return: The app of this RequestMetrics.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this RequestMetrics.


        :param app: The app of this RequestMetrics.
        :type app: str
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")  # noqa: E501

        self._app = app

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this RequestMetrics.


        :return: The dashboard_id of this RequestMetrics.
        :rtype: float
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this RequestMetrics.


        :param dashboard_id: The dashboard_id of this RequestMetrics.
        :type dashboard_id: float
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")  # noqa: E501

        self._dashboard_id = dashboard_id

    @property
    def interval(self):
        """Gets the interval of this RequestMetrics.


        :return: The interval of this RequestMetrics.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RequestMetrics.


        :param interval: The interval of this RequestMetrics.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def interval_ms(self):
        """Gets the interval_ms of this RequestMetrics.


        :return: The interval_ms of this RequestMetrics.
        :rtype: float
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this RequestMetrics.


        :param interval_ms: The interval_ms of this RequestMetrics.
        :type interval_ms: float
        """
        if interval_ms is None:
            raise ValueError("Invalid value for `interval_ms`, must not be `None`")  # noqa: E501

        self._interval_ms = interval_ms

    @property
    def max_data_points(self):
        """Gets the max_data_points of this RequestMetrics.


        :return: The max_data_points of this RequestMetrics.
        :rtype: float
        """
        return self._max_data_points

    @max_data_points.setter
    def max_data_points(self, max_data_points):
        """Sets the max_data_points of this RequestMetrics.


        :param max_data_points: The max_data_points of this RequestMetrics.
        :type max_data_points: float
        """
        if max_data_points is None:
            raise ValueError("Invalid value for `max_data_points`, must not be `None`")  # noqa: E501

        self._max_data_points = max_data_points

    @property
    def panel_id(self):
        """Gets the panel_id of this RequestMetrics.


        :return: The panel_id of this RequestMetrics.
        :rtype: float
        """
        return self._panel_id

    @panel_id.setter
    def panel_id(self, panel_id):
        """Sets the panel_id of this RequestMetrics.


        :param panel_id: The panel_id of this RequestMetrics.
        :type panel_id: float
        """
        if panel_id is None:
            raise ValueError("Invalid value for `panel_id`, must not be `None`")  # noqa: E501

        self._panel_id = panel_id

    @property
    def range(self):
        """Gets the range of this RequestMetrics.


        :return: The range of this RequestMetrics.
        :rtype: TimeRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RequestMetrics.


        :param range: The range of this RequestMetrics.
        :type range: TimeRange
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    @property
    def range_raw(self):
        """Gets the range_raw of this RequestMetrics.


        :return: The range_raw of this RequestMetrics.
        :rtype: TimeRange
        """
        return self._range_raw

    @range_raw.setter
    def range_raw(self, range_raw):
        """Sets the range_raw of this RequestMetrics.


        :param range_raw: The range_raw of this RequestMetrics.
        :type range_raw: TimeRange
        """
        if range_raw is None:
            raise ValueError("Invalid value for `range_raw`, must not be `None`")  # noqa: E501

        self._range_raw = range_raw

    @property
    def request_id(self):
        """Gets the request_id of this RequestMetrics.


        :return: The request_id of this RequestMetrics.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RequestMetrics.


        :param request_id: The request_id of this RequestMetrics.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def scoped_vars(self):
        """Gets the scoped_vars of this RequestMetrics.


        :return: The scoped_vars of this RequestMetrics.
        :rtype: RequestMetricsScopedVars
        """
        return self._scoped_vars

    @scoped_vars.setter
    def scoped_vars(self, scoped_vars):
        """Sets the scoped_vars of this RequestMetrics.


        :param scoped_vars: The scoped_vars of this RequestMetrics.
        :type scoped_vars: RequestMetricsScopedVars
        """
        if scoped_vars is None:
            raise ValueError("Invalid value for `scoped_vars`, must not be `None`")  # noqa: E501

        self._scoped_vars = scoped_vars

    @property
    def targets(self):
        """Gets the targets of this RequestMetrics.


        :return: The targets of this RequestMetrics.
        :rtype: List[RequestMetricsTargets]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RequestMetrics.


        :param targets: The targets of this RequestMetrics.
        :type targets: List[RequestMetricsTargets]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")  # noqa: E501

        self._targets = targets

    @property
    def time_info(self):
        """Gets the time_info of this RequestMetrics.


        :return: The time_info of this RequestMetrics.
        :rtype: str
        """
        return self._time_info

    @time_info.setter
    def time_info(self, time_info):
        """Sets the time_info of this RequestMetrics.


        :param time_info: The time_info of this RequestMetrics.
        :type time_info: str
        """
        if time_info is None:
            raise ValueError("Invalid value for `time_info`, must not be `None`")  # noqa: E501

        self._time_info = time_info

    @property
    def timezone(self):
        """Gets the timezone of this RequestMetrics.


        :return: The timezone of this RequestMetrics.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this RequestMetrics.


        :param timezone: The timezone of this RequestMetrics.
        :type timezone: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

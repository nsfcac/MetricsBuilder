# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RequestMetricsTargets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ref_id=None, type=None, users=None, jobs=None, required=None):  # noqa: E501
        """RequestMetricsTargets - a model defined in OpenAPI

        :param ref_id: The ref_id of this RequestMetricsTargets.  # noqa: E501
        :type ref_id: str
        :param type: The type of this RequestMetricsTargets.  # noqa: E501
        :type type: str
        :param users: The users of this RequestMetricsTargets.  # noqa: E501
        :type users: List[str]
        :param jobs: The jobs of this RequestMetricsTargets.  # noqa: E501
        :type jobs: List[str]
        :param required: The required of this RequestMetricsTargets.  # noqa: E501
        :type required: bool
        """
        self.openapi_types = {
            'ref_id': str,
            'type': str,
            'users': List[str],
            'jobs': List[str],
            'required': bool
        }

        self.attribute_map = {
            'ref_id': 'refId',
            'type': 'type',
            'users': 'users',
            'jobs': 'jobs',
            'required': 'required'
        }

        self._ref_id = ref_id
        self._type = type
        self._users = users
        self._jobs = jobs
        self._required = required

    @classmethod
    def from_dict(cls, dikt) -> 'RequestMetricsTargets':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestMetrics_targets of this RequestMetricsTargets.  # noqa: E501
        :rtype: RequestMetricsTargets
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ref_id(self):
        """Gets the ref_id of this RequestMetricsTargets.


        :return: The ref_id of this RequestMetricsTargets.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this RequestMetricsTargets.


        :param ref_id: The ref_id of this RequestMetricsTargets.
        :type ref_id: str
        """

        self._ref_id = ref_id

    @property
    def type(self):
        """Gets the type of this RequestMetricsTargets.


        :return: The type of this RequestMetricsTargets.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestMetricsTargets.


        :param type: The type of this RequestMetricsTargets.
        :type type: str
        """
        allowed_values = ["metrics", "users", "jobs", "node_core"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def users(self):
        """Gets the users of this RequestMetricsTargets.


        :return: The users of this RequestMetricsTargets.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this RequestMetricsTargets.


        :param users: The users of this RequestMetricsTargets.
        :type users: List[str]
        """

        self._users = users

    @property
    def jobs(self):
        """Gets the jobs of this RequestMetricsTargets.


        :return: The jobs of this RequestMetricsTargets.
        :rtype: List[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this RequestMetricsTargets.


        :param jobs: The jobs of this RequestMetricsTargets.
        :type jobs: List[str]
        """

        self._jobs = jobs

    @property
    def required(self):
        """Gets the required of this RequestMetricsTargets.


        :return: The required of this RequestMetricsTargets.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this RequestMetricsTargets.


        :param required: The required of this RequestMetricsTargets.
        :type required: bool
        """

        self._required = required

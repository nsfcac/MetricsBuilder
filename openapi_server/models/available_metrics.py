# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.metric_source import MetricSource
from openapi_server import util


class AvailableMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, children=None):  # noqa: E501
        """AvailableMetrics - a model defined in OpenAPI

        :param name: The name of this AvailableMetrics.  # noqa: E501
        :type name: str
        :param children: The children of this AvailableMetrics.  # noqa: E501
        :type children: List[MetricSource]
        """
        self.openapi_types = {
            'name': str,
            'children': List[MetricSource]
        }

        self.attribute_map = {
            'name': 'name',
            'children': 'children'
        }

        self._name = name
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'AvailableMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AvailableMetrics of this AvailableMetrics.  # noqa: E501
        :rtype: AvailableMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AvailableMetrics.


        :return: The name of this AvailableMetrics.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableMetrics.


        :param name: The name of this AvailableMetrics.
        :type name: str
        """

        self._name = name

    @property
    def children(self):
        """Gets the children of this AvailableMetrics.


        :return: The children of this AvailableMetrics.
        :rtype: List[MetricSource]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AvailableMetrics.


        :param children: The children of this AvailableMetrics.
        :type children: List[MetricSource]
        """

        self._children = children
